package com.taskApp.task.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_DETAIL".
*/
public class ProductDetailDao extends AbstractDao<ProductDetail, Long> {

    public static final String TABLENAME = "PRODUCT_DETAIL";

    /**
     * Properties of entity ProductDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductName = new Property(1, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductCost = new Property(2, Integer.class, "productCost", false, "PRODUCT_COST");
        public final static Property Qauntity = new Property(3, Integer.class, "qauntity", false, "QAUNTITY");
        public final static Property TotalPrice = new Property(4, Integer.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property IsActive = new Property(5, Boolean.class, "isActive", false, "IS_ACTIVE");
    }


    public ProductDetailDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_NAME\" TEXT," + // 1: productName
                "\"PRODUCT_COST\" INTEGER," + // 2: productCost
                "\"QAUNTITY\" INTEGER," + // 3: qauntity
                "\"TOTAL_PRICE\" INTEGER," + // 4: totalPrice
                "\"IS_ACTIVE\" INTEGER);"); // 5: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(2, productName);
        }
 
        Integer productCost = entity.getProductCost();
        if (productCost != null) {
            stmt.bindLong(3, productCost);
        }
 
        Integer qauntity = entity.getQauntity();
        if (qauntity != null) {
            stmt.bindLong(4, qauntity);
        }
 
        Integer totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindLong(5, totalPrice);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(6, isActive ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(2, productName);
        }
 
        Integer productCost = entity.getProductCost();
        if (productCost != null) {
            stmt.bindLong(3, productCost);
        }
 
        Integer qauntity = entity.getQauntity();
        if (qauntity != null) {
            stmt.bindLong(4, qauntity);
        }
 
        Integer totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindLong(5, totalPrice);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(6, isActive ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductDetail readEntity(Cursor cursor, int offset) {
        ProductDetail entity = new ProductDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // productCost
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // qauntity
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // totalPrice
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isActive
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductCost(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setQauntity(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTotalPrice(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsActive(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
